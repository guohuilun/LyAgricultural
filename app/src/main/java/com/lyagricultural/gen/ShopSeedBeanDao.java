package com.lyagricultural.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lyagricultural.bean.ShopSeedBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP_SEED_BEAN".
*/
public class ShopSeedBeanDao extends AbstractDao<ShopSeedBean, String> {

    public static final String TABLENAME = "SHOP_SEED_BEAN";

    /**
     * Properties of entity ShopSeedBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GId = new Property(0, String.class, "GId", true, "GID");
        public final static Property Nme = new Property(1, String.class, "Nme", false, "NME");
        public final static Property Url = new Property(2, String.class, "Url", false, "URL");
        public final static Property Price = new Property(3, String.class, "Price", false, "PRICE");
        public final static Property Tip = new Property(4, String.class, "Tip", false, "TIP");
        public final static Property Area = new Property(5, String.class, "Area", false, "AREA");
        public final static Property IsChecked = new Property(6, Boolean.class, "isChecked", false, "IS_CHECKED");
        public final static Property Count = new Property(7, int.class, "count", false, "COUNT");
    }


    public ShopSeedBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ShopSeedBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP_SEED_BEAN\" (" + //
                "\"GID\" TEXT PRIMARY KEY NOT NULL ," + // 0: GId
                "\"NME\" TEXT," + // 1: Nme
                "\"URL\" TEXT," + // 2: Url
                "\"PRICE\" TEXT," + // 3: Price
                "\"TIP\" TEXT," + // 4: Tip
                "\"AREA\" TEXT," + // 5: Area
                "\"IS_CHECKED\" INTEGER," + // 6: isChecked
                "\"COUNT\" INTEGER NOT NULL );"); // 7: count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP_SEED_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShopSeedBean entity) {
        stmt.clearBindings();
 
        String GId = entity.getGId();
        if (GId != null) {
            stmt.bindString(1, GId);
        }
 
        String Nme = entity.getNme();
        if (Nme != null) {
            stmt.bindString(2, Nme);
        }
 
        String Url = entity.getUrl();
        if (Url != null) {
            stmt.bindString(3, Url);
        }
 
        String Price = entity.getPrice();
        if (Price != null) {
            stmt.bindString(4, Price);
        }
 
        String Tip = entity.getTip();
        if (Tip != null) {
            stmt.bindString(5, Tip);
        }
 
        String Area = entity.getArea();
        if (Area != null) {
            stmt.bindString(6, Area);
        }
 
        Boolean isChecked = entity.getIsChecked();
        if (isChecked != null) {
            stmt.bindLong(7, isChecked ? 1L: 0L);
        }
        stmt.bindLong(8, entity.getCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShopSeedBean entity) {
        stmt.clearBindings();
 
        String GId = entity.getGId();
        if (GId != null) {
            stmt.bindString(1, GId);
        }
 
        String Nme = entity.getNme();
        if (Nme != null) {
            stmt.bindString(2, Nme);
        }
 
        String Url = entity.getUrl();
        if (Url != null) {
            stmt.bindString(3, Url);
        }
 
        String Price = entity.getPrice();
        if (Price != null) {
            stmt.bindString(4, Price);
        }
 
        String Tip = entity.getTip();
        if (Tip != null) {
            stmt.bindString(5, Tip);
        }
 
        String Area = entity.getArea();
        if (Area != null) {
            stmt.bindString(6, Area);
        }
 
        Boolean isChecked = entity.getIsChecked();
        if (isChecked != null) {
            stmt.bindLong(7, isChecked ? 1L: 0L);
        }
        stmt.bindLong(8, entity.getCount());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ShopSeedBean readEntity(Cursor cursor, int offset) {
        ShopSeedBean entity = new ShopSeedBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // GId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Nme
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Price
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Tip
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Area
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isChecked
            cursor.getInt(offset + 7) // count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShopSeedBean entity, int offset) {
        entity.setGId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNme(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrice(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTip(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setArea(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsChecked(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setCount(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ShopSeedBean entity, long rowId) {
        return entity.getGId();
    }
    
    @Override
    public String getKey(ShopSeedBean entity) {
        if(entity != null) {
            return entity.getGId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShopSeedBean entity) {
        return entity.getGId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
